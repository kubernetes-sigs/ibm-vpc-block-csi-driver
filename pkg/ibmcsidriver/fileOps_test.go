/*
Copyright 2024 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package ibmcsidriver

import (
	"errors"
	"os"
	"testing"

	cloudProvider "github.com/IBM/ibmcloud-volume-vpc/pkg/ibmcloudprovider"
	"github.com/kubernetes-sigs/ibm-vpc-block-csi-driver/pkg/ibmcsidriver/ibmcsidriverfakes"
	"github.com/stretchr/testify/assert"
)

func TestSetupSidecar(t *testing.T) {
	tests := []struct {
		name               string
		groupID            string
		expectedErr        bool
		chownErr           error
		chmodErr           error
		expectedChownCalls int
		expectedChmodCalls int
		expectedGroupID    int
	}{
		{
			name:               "ValidGroupID",
			groupID:            "2121",
			expectedErr:        false,
			chownErr:           nil,
			chmodErr:           nil,
			expectedChownCalls: 1,
			expectedChmodCalls: 1,
			expectedGroupID:    2121,
		},
		{
			name:               "EmptyGroupID",
			groupID:            "",
			expectedErr:        false,
			chownErr:           nil,
			chmodErr:           nil,
			expectedChownCalls: 1,
			expectedChmodCalls: 1,
			expectedGroupID:    0, // Default to 0 if SIDECAR_GROUP_ID is empty
		},
		{
			name:               "ChownError",
			groupID:            "1000",
			expectedErr:        true,
			chownErr:           errors.New("chown error"),
			chmodErr:           nil,
			expectedChownCalls: 1,
			expectedChmodCalls: 0, // No chmod expected if chown fails
			expectedGroupID:    1000,
		},
		{
			name:               "ChmodError",
			groupID:            "1000",
			expectedErr:        true,
			chownErr:           nil,
			chmodErr:           errors.New("chmod error"),
			expectedChownCalls: 1,
			expectedChmodCalls: 1,
			expectedGroupID:    1000,
		},
	}

	for _, tc := range tests {
		t.Run(tc.name, func(t *testing.T) {
			// Set SIDECAR_GROUP_ID environment variable
			if tc.groupID != "" {
				err := os.Setenv("SIDECAR_GROUP_ID", tc.groupID)
				assert.NoError(t, err)
			} else {
				err := os.Unsetenv("SIDECAR_GROUP_ID")
				assert.NoError(t, err)
			}
			defer os.Unsetenv("SIDECAR_GROUP_ID") // nolint:errcheck

			// Create the fake object generated by counterfeiter
			fakeSocketPermission := new(ibmcsidriverfakes.FakeSocketPermission)

			// Set return values for chown and chmod methods
			fakeSocketPermission.ChownReturns(tc.chownErr)
			fakeSocketPermission.ChmodReturns(tc.chmodErr)

			// Creating test logger
			logger, teardown := cloudProvider.GetTestLogger(t)
			defer teardown()

			// Call the function under test
			err := setupSidecar("/path/to/socket", fakeSocketPermission, logger)

			// Verify the result
			if tc.expectedErr {
				assert.Error(t, err)
			} else {
				assert.NoError(t, err)
			}

			// Verify the number of times Chown and Chmod were called
			assert.Equal(t, tc.expectedChownCalls, fakeSocketPermission.ChownCallCount())
			assert.Equal(t, tc.expectedChmodCalls, fakeSocketPermission.ChmodCallCount())

			// Verify the group ID passed to chown
			if tc.expectedChownCalls > 0 {
				_, _, actualGroupID := fakeSocketPermission.ChownArgsForCall(0)
				assert.Equal(t, tc.expectedGroupID, actualGroupID)
			}
		})
	}
}
